using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.Serialization.Formatters;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Resources;

namespace ЛР7
{
    public partial class Form1 : Form
    {
        public interface Interface
        {
            Bitmap bitmap { get; set; }
            void Create(Size size);
            void Move(int x, int y, PictureBox pb);
        }
        abstract class Figure : Interface
        {
            public abstract Bitmap bitmap { get; set; }
            public abstract void Create(Size size);
            public abstract void Move(int x, int y, PictureBox pb);
        }
        class Zvezda : Figure
        {
            public override Bitmap bitmap { get; set; }
            public override void Create(Size size)
            {
                bitmap = new Bitmap(Properties.Resources.star, size);
            }
            public override void Move(int x, int y, PictureBox pb)
            {
                pb.Location = new Point(x, y);
            }
        }
        class Smailik1 : Figure
        {
            public override Bitmap bitmap { get; set; }
            public override void Create(Size size)
            {
                bitmap = new Bitmap(Properties.Resources.images,size);
            }
            public override void Move(int x, int y, PictureBox pb)
            {
                pb.Location = new Point(x, y);
            }
        }
        class Smailik2 : Figure
        {
            public override Bitmap bitmap { get; set; }
            public override void Create(Size size)
            {
                bitmap = new Bitmap(Properties.Resources._572570, size);
            }
            public override void Move(int x, int y, PictureBox pb)
            {
                pb.Location = new Point(x, y);
            }
        }





        private List<Figure> figur = new List<Figure>();
        private List<PictureBox> pictureBox = new List<PictureBox>();
        private List<int> nomera = new List<int>();
        private delegate void PaintDelegate(int x, int y);
        private event PaintDelegate NewPaintEventPaint;

        public Form1()
        {
            InitializeComponent();
            NewPaintEventPaint += OnPaint;
        }
        private void OnRbtnClick(object sender, EventArgs e)
        {
            var obj = (RadioButton)sender;
            switch (obj.Text.ToString())
            {
                case "Звездочка": figur.Add(new Zvezda()); break;
                case "Смайлик №1": figur.Add(new Smailik1()); break;
                case "Смайлик №2": figur.Add(new Smailik2()); break;
            }
        }
        private void OnMouseClick(object sender, MouseEventArgs e)
        {
            int x = e.X-trackBar1.Value/2;
            int y = e.Y-trackBar1.Value/2;
            if (e.Button == MouseButtons.Left)
                NewPaintEventPaint.Invoke(x, y);
        }
        private void OnPaint(int x, int y)
        {
                if (chkBoxDelete.Checked)
                {
                    bool a = true; 
                    int nomer=1,i = 0;
                    if(Star.Checked) nomer=1;
                    if(Smile.Checked) nomer = 2;
                    if(Smile2.Checked) nomer= 3;
                    while (a)
                    {
                        if (i < nomera.Count)
                            if (nomera[i] == nomer)
                            {
                                    this.Controls.Remove(pictureBox[i]);
                                    pictureBox.RemoveAt(i);
                                    nomera.RemoveAt(i);
                            }
                            else i++;
                        else a = false;
                    }
                }
                if (chkBoxPaint.Checked)
                {
                    pictureBox.Add(new PictureBox());
                    SetIndex(figur.Last());
                    pictureBox.Last().Location = new Point(x, y);
                    figur.Last().Create(new Size(trackBar1.Value, trackBar1.Value));
                    pictureBox.Last().Size = figur.Last().bitmap.Size;
                    this.Controls.Add(pictureBox.Last());
                    pictureBox.Last().Image = figur.Last().bitmap;
                    if (figur.Last() as Zvezda != null) figur.Add(new Zvezda());
                    if (figur.Last() as Smailik1 != null) figur.Add(new Smailik1());
                    if (figur.Last() as Smailik2 != null) figur.Add(new Smailik2());
                }
            

        }
        private void SetIndex(Figure f)
        {          
            if (f as Zvezda != null) nomera.Add(1);
            if (f as Smailik1 != null) nomera.Add(2);
            if (f as Smailik2 != null) nomera.Add(3);
        }

        private void PaintChBox_Checked(object sender, EventArgs e)
        {
            var obj = (CheckBox)sender;
            if (obj.Checked)
            {
                chkBoxDelete.Checked = false;
                chkBoxMove.Checked = false;
            }

        }
        private void DeleteChBox_Checked(object sender, EventArgs e)
        {
            var obj = (CheckBox)sender;
            if (obj.Checked)
            {
                chkBoxPaint.Checked = false;
                chkBoxMove.Checked = false;
            }
        }
        private void MoveChBox_Checked(object sender, EventArgs e)
        {
            var obj = (CheckBox)sender;
            if (obj.Checked)
            {
                chkBoxPaint.Checked = false;
                chkBoxDelete.Checked = false;
            }
        }
        private void OnMouseDoubleClick(object sender, MouseEventArgs e)
        {
            bool a = true;
            int nomer = 0, i = 0;
            if (Star.Checked) nomer = 1;
            if (Smile.Checked) nomer = 2;
            if (Smile2.Checked) nomer = 3;
            while (a)
            {
                if (i < nomera.Count)
                    if (nomera[i] == nomer)
                    {
                        if ((chkBoxMove.Checked) && (pictureBox.Count != 0))
                            figur[i].Move(e.X - trackBar1.Value / 2, e.Y - trackBar1.Value / 2, pictureBox[i]);
                        i++;
                    }
                    else i++;
                else a = false;
            }
            //if ((chkBoxMove.Checked)&&(pictureBox.Count!=0))
            //    figur.Last().Move(e.X-trackBar1.Value/2, e.Y-trackBar1.Value/2, pictureBox.Last());
        }

    }
}
